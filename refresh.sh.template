#!/usr/bin/env bash
set -eu # stop on error or undefined variables


# As a template, this file helps implement the refresh_compile_commands rule and is not part of the user interface.
# See ImplementationReadme.md for top-level context--or refresh_compile_commands.bzl for narrower context.


# Interface (after Bazel's template expansion): 
# `bazel run` to make autocomplete (and any other clang tooling!) reflect the latest Bazel build files.
    # No arguments are needed; they're baked into the template expansion.
# Output: a compile_commands.json in the workspace root that clang tooling (or you!) can look at to figure out how files are being compiled by Bazel

# Bazel Template Interface: Expand get_commands into, for example:
    # get_commands //:target_1 --important_flag1 --important_flag2=true
    # get_commands //:target_2
# More generally, each line should be:
    # get_commands <label> <optional: flags>


###############################################################################
# Implementation:

cd "$BUILD_WORKSPACE_DIRECTORY" # Change into workspace's root so compile_commands.json goes the right place -- and so we can invoke Bazel on the repo within this script.

# Call with the same flags as `bazel build`, one target per call, followed by flags
# Appends the entries to compile_commands.json
get_commands() {
    # Log clear completion messages
    echo -e "\033[0;34m" ">>> Analyzing commands used in" "$1" "\033[0m"

    # Queries Bazel's C-family compile actions, and runs them through our extract.py reformatter
    # Aquery docs if you need em: https://docs.bazel.build/versions/master/aquery.html
        # One bummer, not described in the docs, is that aquery filters over *all* actions for a given target, rather than just those that would be run by a build to produce a given output. This mostly isn't a problem, but can sometimes surface extra, unnecessary, misconfigured actions. Chris has emailed the authors to discuss and filed an issue so anyone reading this could track it: https://github.com/bazelbuild/bazel/issues/14156.
    # We switched to jsonproto instead of proto because of https://github.com/bazelbuild/bazel/issues/13404. We could change back when fixed--reverting most of the commit that added this line and tweaking the build file to depend on the target in that issue. That said, it's kinda nice to be free of the dependency, unless (OPTIMNOTE) jsonproto becomes a performance bottleneck compated to binary protos.
    # The redirection/pipe craziness at the end causes output to be appendded compile_command.json entries, with stderr logging redirected to stdout, filtered by sed.
    {
        # Piping between bazel commands sometimes causes deadlock, so we begin with the usual, safe tempfile setup.
        trap 'rm -f "$TMPFILE"' EXIT
        TMPFILE=$(mktemp)

        bazel aquery "mnemonic('(Objc|Cpp)Compile',deps($1))" \
        --ui_event_filters=-info --noshow_progress \
        --output=jsonproto "${@:2}" > "$TMPFILE"
        < "$TMPFILE" bazel run @hedron_compile_commands//:extract \
            --ui_event_filters=-info --noshow_progress # Shush logging. Just for readability.
    } 2>&1 >> compile_commands.json | sed -e '
# Further hide Bazel build details.
    # [Deletes both lines of the notification that the build of :extract has completed.]
/Target .*:extract up-to-date:/{N;d;}

# Shushes known warnings about missing graph targets
# The missing graph targets are not things we want to introspect anyway, but I filed an issue https://github.com/bazelbuild/bazel/issues/13007
/WARNING: Targets were missing from graph:/d'

    # Log clear completion messages
    echo -e "\033[0;32m" ">>> Finished extracting commands for" "$1" "\033[0m"
}

# Chain output into compile_commands.json
printf "[" > compile_commands.json # Add json list around. Commands add their own commas. Note overwrite of file. (& printf skipping trailing newline.)

# Begin: Command template filled by Bazel
{get_commands}
# End: Command template filled by Bazel

# sed -i '' '$ s/,$//' compile_commands.json # Remove extra, trailing comma
printf "]" >> compile_commands.json
